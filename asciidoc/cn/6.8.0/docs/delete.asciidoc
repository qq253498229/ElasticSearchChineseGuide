[[java-docs-delete]]
=== Delete API

Delete API 可以在指定的索引中根据ID删除一个JSON类型的文档。
下面就是一个删除JSON文档的例子，它的index是twitter，type是 `_doc` ，id是1:

[source,java]
--------------------------------------------------
DeleteResponse response = client.prepareDelete("twitter", "_doc", "1").get();
--------------------------------------------------

有关Delete操作的更多信息，请查看 {ref}/docs-delete.html[delete API] 。

[[java-docs-delete-by-query]]
=== Delete By Query API

Delete By Query API 可以根据查询的结果删除一组文档:

["source","java"]
--------------------------------------------------
BulkByScrollResponse response =
  DeleteByQueryAction.INSTANCE.newRequestBuilder(client)
    .filter(QueryBuilders.matchQuery("gender", "male")) <1>
    .source("persons") <2>
    .get(); <3>
long deleted = response.getDeleted(); <4>
--------------------------------------------------
<1> query
<2> index
<3> 执行操作
<4> 删除文档的数量

由于这个操作可能会运行很长时间，如果你希望异步执行，可以使用 `execute` 代替 `get` 来执行，并提供一个listener，比如:

["source","java"]
--------------------------------------------------
DeleteByQueryAction.INSTANCE.newRequestBuilder(client)
    .filter(QueryBuilders.matchQuery("gender", "male")) <1>
    .source("persons") <2>
    .execute(new ActionListener<BulkByScrollResponse>() { <3>
        @Override
        public void onResponse(BulkByScrollResponse response) {
            long deleted = response.getDeleted(); <4>
        }
        @Override
        public void onFailure(Exception e) {
            // Handle the exception
        }
    });
--------------------------------------------------
<1> query
<2> index
<3> 执行操作
<4> 删除文档的数量